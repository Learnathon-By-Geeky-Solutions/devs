# Sample workflow for building and deploying a Next.js site to GitHub Pages
#
# To get started with Next.js see: https://nextjs.org/docs/getting-started
#
name: Deploy Next.js site in Subdirectory to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main", "hotfix/main-TASK_81-fix_nextjs_static_file_issue"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Detect package manager
        id: detect-package-manager
        # Check for lock files or package.json within the /roamance subdirectory
        run: |
          if [ -f "${{ github.workspace }}/roamance/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/roamance/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            # Using ci is generally preferred over install in CI environments
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Unable to determine package manager in /roamance"
            exit 1
          fi

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          # Cache dependencies based on the detected manager
          cache: ${{ steps.detect-package-manager.outputs.manager }}
          # Specify the path to the lock file within the subdirectory for caching
          cache-dependency-path: roamance/${{ steps.detect-package-manager.outputs.manager == 'yarn' && 'yarn.lock' || 'package-lock.json' }}

      - name: Setup Pages
        uses: actions/configure-pages@v5
        with:
          # Specify the working directory for the Next.js project
          working-directory: roamance
          # Automatically inject basePath etc. based on Next.js static export
          static_site_generator: next

      - name: Restore cache
        uses: actions/cache@v4
        with:
          # Cache the .next/cache directory relative to the Next.js project folder
          path: |
            roamance/.next/cache
          # Generate a new cache whenever packages or source files change in the subdirectory.
          # Paths here are relative to the root of the repository (GITHUB_WORKSPACE)
          key: ${{ runner.os }}-nextjs-${{ hashFiles('roamance/**/package-lock.json', 'roamance/**/yarn.lock') }}-${{ hashFiles('roamance/**/[jt]s', 'roamance/**/[jt]sx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('roamance/**/package-lock.json', 'roamance/**/yarn.lock') }}-

      - name: Install dependencies
        # Run the install command within the /roamance directory
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
        working-directory: roamance

      - name: Build with Next.js
        # Run the build command within the /roamance directory
        run: ${{ steps.detect-package-manager.outputs.runner }} next build
        working-directory: roamance
        # By default, run steps fail the job if the command exits with a non-zero status.
        # This is good and we want this behavior, so no explicit 'continue-on-error: true' here.

      # --- Added Diagnostic Step ---
      - name: List contents of roamance directory after build
        run: ls -la roamance/
      # -----------------------------

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # Upload the 'out' directory located within the /roamance directory
          path: ./roamance/out # Path relative to the repository root

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
